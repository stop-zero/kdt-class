<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>로그인</title>
    <!-- axios -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <h1>로그인</h1>
    <!-- 
      [로그인] 버튼을 클릭하면 profile.ejs(회원정보 수정 페이지)에서 
      특정 유저 정보를 보여주어야 하기 때문에 
      userid 정보를 value에 저장(POST /user/signin 요청의 응답을 받은 후 수행)하여
      폼(input)이 보이지 않도록 hidden 처리함
    -->
    <form name="form_info" action="/user/profile" method="POST">
      <input type="hidden" name="userid" />
    </form>

    <form name="form_login">
      <label for="userid">ID</label>
      <input id="userid" type="text" name="userid" required /><br />
      <label for="password">Password</label>
      <input id="password" type="password" name="pw" required /><br />
      <button type="button" onclick="login();">Login</button>
    </form>

    <a href="/user/signup">Register</a>

    <script>
      //로그인 버튼 클릭시 서버에 로그인 요청하기 
       async function login() {
        const form_login = document.forms['form_login'];

        //유효성 검사 코드 
        if (!form_login.checkValidity()) {
          form_login.reportValidity();
          return;
        }

        //const response = await axois({})
      
        await axios({
          method: 'POST',
          url: '/user/signin',
          data: {
            userid: form_login.userid.value,
            pw: form_login.pw.value,
          },
        })
        //console.log(response);
          .then((res) => {
            return res.data;
          })
          .then((data) => {
            if (data) {
              // (1) alert 띄우기
              alert('로그인 성공 🥳');
              // (2) form_info 폼 선택
              const form_info = document.forms['form_info'];  //숨겨진 폼 선택 
              // (3) form_login의 userid 값을 form_info의 userid value에 저장
              form_info.userid.value = form_login.userid.value;
              // (4) form_info 제출
              form_info.submit(); //폼 제출 => button type="submint" 을 누른 것과 동일한 효과
              // forms['form_info'] 요소의 action, method 속성 값에 의하여
              // POST /user/profile 요청 수정할 수 있게 됨
            } else {
              alert('로그인 실패');
              form.reset(); //로그인 폼 초기화
            }
          });
      }
    </script>
  </body>
</html>
